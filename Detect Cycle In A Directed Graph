bool dfs(int src,int parent,int vis[],int pathvis[],vector<int> adj[])
{
   vis[src]=1;
   pathvis[src]=1;

   for(auto it: adj[src])
   {
        if(pathvis[it]==1)
        return true;

        else if(vis[it]==0&&dfs(it,src,vis,pathvis,adj)==true)
        return true;
   }
   pathvis[src]=0;
   return false;
}


void makeEdge(int u,int v,vector<int> adj[])
{
  adj[u-1].push_back(v-1);
}



int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  
  vector<int> adj[n];
  for(int i=0;i<edges.size();i++)
  {
    int u= edges[i].first;
    int v= edges[i].second;
    makeEdge(u,v,adj);
  }
  int vis[n]={0};
  int pathvis[n]={0};
   for(int i=0;i<n;i++)
   {
     if(vis[i]==0)
     {
       if(dfs(i,-1,vis,pathvis,adj)==true)
       return true;
     }
   }
   return false;

}
