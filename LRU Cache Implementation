#include<bits/stdc++.h>
class LRUCache
{
public:
    class Node{
       public: 
        int key;
        int val;
        Node* next;
        Node* prev;

        Node(int k,int v){
            key=k;
            val=v;
        }
    };
    Node* head=new Node(-1,-1);
    Node* tail= new Node(-1,-1);
    int cap;
    unordered_map<int,Node*> mp;

    LRUCache(int capacity)
    {
        cap=capacity;
        head->next=tail;
        tail->prev=head;
    }

    void addnode(Node* newnode){
        Node* tmp=head->next;
        newnode->next=tmp;
        newnode->prev=head;
        head->next=newnode;
        tmp->prev=newnode;
    }

    void deletenode(Node* delnode){
        Node* delp=delnode->prev;
        Node* deln=delnode->next;
        delp->next=deln;
        deln->prev=delp;
    }

    int get(int key)
    {
        if(mp.find(key)==mp.end())
        return -1;
        else
        {
            Node* tmp= mp[key];
            int ans= tmp->val;
            mp.erase(key);
            deletenode(tmp);
            addnode(tmp);
            mp[key]=head->next;
            // Node* tmpnext= tmp->next;
            // tmp->next->prev= tmp->prev;
            // tmp->prev->next=tmp->next;
            return ans;
        }
    }

    void put(int key, int value)
    {
        if(mp.find(key)!=mp.end()){
            Node* exnode= mp[key];
            mp.erase(key);
            deletenode(exnode);
        }
        if(mp.size()==cap){
            mp.erase(tail->prev->key);
            deletenode(tail->prev);
        }
        addnode( new Node(key,value));
        mp[key]=head->next;
    }
};
